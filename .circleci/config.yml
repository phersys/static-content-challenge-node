# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.2.1 # Use the AWS ECR orb in your configuration

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello

  build_and_push_image:
    jobs:
      - aws-ecr/build-and-push-image: # Use the pre-defined `build-and-push-image` job
          aws-access-key-id: ACCESS_KEY_ID
          aws-cli-version: latest
          aws-secret-access-key: SECRET_ACCESS_KEY
          context: myContext
          create-repo: true
          dockerfile: Dockerfile
          executor: aws-ecr/default
          extra-build-args: '--compress'
          new-profile-name: newProfileName
          no-output-timeout: 20m
          path: .
          platform: linux/amd64
          public-registry: false
          push-image: true
          registry-id: AWS_ECR_REGISTRY_ID
          repo: ecr_repository
          repo-policy-path: repo-policy.json
          repo-scan-on-push: false
          role-arn: 'arn:aws:iam::102674001957:role/ecr'
          set-repo-policy: false
          skip-when-tags-exist: false
          tag: 'latest,myECRRepoTag'
